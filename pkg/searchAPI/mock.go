// Code generated by mockery v2.42.3. DO NOT EDIT.

package searchapi

import (
	brand "github.com/Leonargo404-code/find-my-brand/pkg/brand"
	mock "github.com/stretchr/testify/mock"
)

// Mock is an autogenerated mock type for the SearchAPI type
type Mock struct {
	mock.Mock
}

// GoogleSearch provides a mock function with given fields: searchQuery, location, page
func (_m *Mock) GoogleSearch(searchQuery string, location string, page int64) (*brand.Result, error) {
	ret := _m.Called(searchQuery, location, page)

	if len(ret) == 0 {
		panic("no return value specified for GoogleSearch")
	}

	var r0 *brand.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int64) (*brand.Result, error)); ok {
		return rf(searchQuery, location, page)
	}
	if rf, ok := ret.Get(0).(func(string, string, int64) *brand.Result); ok {
		r0 = rf(searchQuery, location, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*brand.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int64) error); ok {
		r1 = rf(searchQuery, location, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMock creates a new instance of Mock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mock {
	mock := &Mock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
